<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#
    var lines = @"account-login
account-logout
action-redo
action-undo
align-center
align-left
align-right
aperture
arrow-bottom
arrow-circle-bottom
arrow-circle-left
arrow-circle-right
arrow-circle-top
arrow-left
arrow-right
arrow-thick-bottom
arrow-thick-left
arrow-thick-right
arrow-thick-top
arrow-top
audio
audio-spectrum
badge
ban
bar-chart
basket
battery-empty
battery-full
beaker
bell
bluetooth
bold
bolt
book
bookmark
box
briefcase
british-pound
browser
brush
bug
bullhorn
calculator
calendar
camera-slr
caret-bottom
caret-left
caret-right
caret-top
cart
chat
check
chevron-bottom
chevron-left
chevron-right
chevron-top
circle-check
circle-x
clipboard
clock
cloud
cloud-download
cloud-upload
cloudy
code
cog
collapse-down
collapse-left
collapse-right
collapse-up
command
comment-square
compass
contrast
copywriting
credit-card
crop
dashboard
data-transfer-download
data-transfer-upload
delete
dial
document
dollar
double-quote-sans-left
double-quote-sans-right
double-quote-serif-left
double-quote-serif-right
droplet
eject
elevator
ellipses
envelope-closed
envelope-open
euro
excerpt
expand-down
expand-left
expand-right
expand-up
external-link
eye
eyedropper
file
fire
flag
flash
folder
fork
fullscreen-enter
fullscreen-exit
globe
graph
grid-four-up
grid-three-up
grid-two-up
hard-drive
header
headphones
heart
home
image
inbox
infinity
info
italic
justify-center
justify-left
justify-right
key
laptop
layers
lightbulb
link-broken
link-intact
list
list-rich
location
lock-locked
lock-unlocked
loop
loop-circular
loop-square
magnifying-glass
map
map-marker
media-pause
media-play
media-record
media-skip-backward
media-skip-forward
media-step-backward
media-step-forward
media-stop
medical-cross
menu
microphone
minus
monitor
moon
move
musical-note
paperclip
pencil
people
person
phone
pie-chart
pin
play-circle
plus
power-standby
print
project
pulse
puzzle-piece
question-mark
rain
random
reload
resize-both
resize-height
resize-width
rss
rss-alt
script
share
share-boxed
shield
signal
signpost
sort-ascending
sort-descending
spreadsheet
star
sun
tablet
tag
tags
target
task
terminal
text
thumb-down
thumb-up
timer
transfer
trash
underline
vertical-align-bottom
vertical-align-center
vertical-align-top
video
volume-high
volume-low
volume-off
warning
wifi
wrench
x
yen
zoom-in
zoom-out";

    var items = lines
        .Split('\n', '\r')
        .Where(a => !string.IsNullOrEmpty(a))
        //.Select(ConvertCamel)
        .ToArray();
    /*
    for (var i = 0; i < items.Length - 1; i++)
    {
        items[i] = items[i] + ",";
    }
    */


    static string ConvertCamel(string x)
    {
        var big = true;
        var sb = new StringBuilder();
        foreach (var i in x)
        {
            if (i == '-')
            {
                big = true;
                continue;
            }
            if (big)
                sb.Append(char.ToUpper(i));
            else
                sb.Append(i);
            big = false;
        }
        
        return sb.ToString();
    }

#>
using System;


namespace AutoUml {
    public enum OpenIconicKind {
<#
    for (var i = 0; i < items.Length; i++)
    {
        var value = items[i];
        var appendComma = i < items.Length - 1;
        var enumValue = ConvertCamel(value) + " = " + i.ToString(CultureInfo.InvariantCulture);
        if (appendComma)
            enumValue += ',';
#>
        /// <summary>OpenIconic <#= value #></summary>
        <#= enumValue #>
<#
    } #>
    }

    public static class OpenIconicKindUtils {
        static readonly string[] Names = {
<#
    for (var i = 0; i < items.Length; i++)
    {
        var value = items[i];
        var appendComma = i < items.Length - 1;
        var enumValue = '"' + value + "\"";
        if (appendComma)
            enumValue += ',';
#>
            <#= enumValue #>
<#
    } 
#>
       };
 
       public static string ToCode(this OpenIconicKind kind)
        {
            var idx = (int)kind;
            if (idx < 0 || idx >= Names.Length)
                throw new ArgumentException(nameof(kind));
            return Names[idx];
        }
        
        public static PlantUmlText AsPlantUmlText (this OpenIconicKind kind)
        {
            return new PlantUmlText(kind);
        } 

    }
}